# Нашел интересную возможность сравнивать полиномы Pn(x). Если мы представим полином как функцию x->y : y=P(x). Получаем y=P1(x) и y=P2(x). P1 > P2 если для любого x
# значение P1(x) > P2(x). Если интерпритировать графически, то это значит что график функции P1(x) везде будет выше P2(x) и они не будут иметь точек пересечения.

# Тоесть мы переходим к задаче проверки налия точек пересечения двух функций. Для нахождения точек пересечения нужно решить систему уравнений [P1(x)=y, P2(x)=y]
# Вычитаем из первого уравнения второе получаем P1(x) - P2(x) = 0 или новый полином P*(x) степени maxStep(P1, P2). На самом деле нам не важны сами значение, а важно их наличие.

# Поэтому теперь вопрос встает есть ли у P*(x) действительные корни. Для полиномов нечетной степени один действительный корень обязан быть, поскольку все комплексные
# обязанны быть парными. Остаются полиномы с четной степенью. Графики таких функций представляют разнообразные параболы, ветви которых уходят в бесконечность вверх
# или вниз в зависимости от коэффициента перед старшей степенью.

# Вопрос стоит пересечет и она ось оХ или нет. Расмотрим когда ветви направленны вверх. В этом случает мы можем воспользоваться средствами python для поиска минимума
# этой функции(Основания параболы), и если минимум меньше нуля то значит мы в любом случае пересечем оХ и следовательно у нас будут действительные корни. Для ветвей вниз
# рассуждения аналогичные.

from scipy.optimize import fmin
from numpy import array
from pol import *

    
class CookFunction:
    def __init__(self, pol):
        self.pol = pol
        
    def func(self, x):
        res = 0
        count = 0
        for i in range(len(self.pol.varSet)-1,0,-1):
            res += self.pol.varSet[i]*pow(x,count)
            count = count + 1
        return res
# end class CookFunction


def CheckIntersections(pol):
    fOur = CookFunction(pol)
    xVal = 1
    sol = fmin(fOur.func,xVal)
    print("Solution : " + str(fOur.func(sol[0])))
    if (fOur.func(sol[0]) > 0 and pol.varSet[0] > 0 or fOur.func(sol[0]) < 0 and pol.varSet[0] < 0):
        print("Intersections: -")
        return False;
    else:
        print("Intersections: +")
        return True;

# Main

#tmp = fmin(func_1,xVal)
#print("type : " + str(type(tmp)))
#print("tmp[0] : " + str(tmp[0]))
#print("Solution : " + str(func_1(tmp[0])))

pol_1 = Polynomial([1,0,0,2,0,0,3])
pol_2 = Polynomial([1,0,-1,0,0,3])
print(pol_1)
print(pol_2)
print("pol_1 - pol2 : " + str(pol_1 - pol_2))
CheckIntersections(pol_1 - pol_2)
